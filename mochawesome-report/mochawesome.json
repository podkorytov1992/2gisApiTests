{
  "stats": {
    "suites": 4,
    "tests": 61,
    "passes": 23,
    "pending": 0,
    "failures": 38,
    "start": "2020-08-01T18:31:29.953Z",
    "end": "2020-08-01T18:31:31.466Z",
    "duration": 1513,
    "testsRegistered": 61,
    "passPercent": 37.704918032786885,
    "pendingPercent": 0,
    "other": 0,
    "hasOther": false,
    "skipped": 0,
    "hasSkipped": false
  },
  "results": [
    {
      "uuid": "55818de8-511b-4472-a6d5-e34045675413",
      "title": "",
      "fullFile": "",
      "file": "",
      "beforeHooks": [],
      "afterHooks": [],
      "tests": [],
      "suites": [
        {
          "uuid": "6b6cff55-a4e8-46c9-96e2-43988c070a07",
          "title": "проверка параметра \"country_code\"",
          "fullFile": "/home/andrey/Dev/test2gis/src/tests/country-code.spec.js",
          "file": "/src/tests/country-code.spec.js",
          "beforeHooks": [],
          "afterHooks": [],
          "tests": [
            {
              "title": "проверка валидного значения: ru",
              "fullTitle": "проверка параметра \"country_code\" проверка валидного значения: ru",
              "timedOut": false,
              "duration": 81,
              "state": "passed",
              "speed": "slow",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "// arrange\nconst queryParams = { country_code: value };\n// act\nconst { body, statusCode } = await findRegions(queryParams);\n// assert\nassertCorrectStatusCode(statusCode, VALID_VALUES.expectedStatusCode);\nassertCorrectBody(body);\nassertCorrectItems(body.items);\nbody.items.forEach(item => {\n\tassert.equal(item.country.code, value);\n});",
              "err": {},
              "uuid": "548d788e-1d64-4161-af1c-c911c163cfd2",
              "parentUUID": "6b6cff55-a4e8-46c9-96e2-43988c070a07",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "проверка валидного значения: kg",
              "fullTitle": "проверка параметра \"country_code\" проверка валидного значения: kg",
              "timedOut": false,
              "duration": 43,
              "state": "failed",
              "speed": null,
              "pass": false,
              "fail": true,
              "pending": false,
              "context": null,
              "code": "// arrange\nconst queryParams = { country_code: value };\n// act\nconst { body, statusCode } = await findRegions(queryParams);\n// assert\nassertCorrectStatusCode(statusCode, VALID_VALUES.expectedStatusCode);\nassertCorrectBody(body);\nassertCorrectItems(body.items);\nbody.items.forEach(item => {\n\tassert.equal(item.country.code, value);\n});",
              "err": {
                "message": "AssertionError: expected 'kz' to equal 'kg'",
                "estack": "AssertionError: expected 'kz' to equal 'kg'\n    at /home/andrey/Dev/test2gis/src/tests/country-code.spec.js:41:12\n    at Array.forEach (<anonymous>)\n    at Context.<anonymous> (src/tests/country-code.spec.js:40:15)\n    at processTicksAndRejections (internal/process/task_queues.js:88:5)",
                "diff": "- kz\n+ kg\n"
              },
              "uuid": "ff794125-8808-4acd-be70-0a7fc5c95035",
              "parentUUID": "6b6cff55-a4e8-46c9-96e2-43988c070a07",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "проверка валидного значения: kz",
              "fullTitle": "проверка параметра \"country_code\" проверка валидного значения: kz",
              "timedOut": false,
              "duration": 32,
              "state": "failed",
              "speed": null,
              "pass": false,
              "fail": true,
              "pending": false,
              "context": null,
              "code": "// arrange\nconst queryParams = { country_code: value };\n// act\nconst { body, statusCode } = await findRegions(queryParams);\n// assert\nassertCorrectStatusCode(statusCode, VALID_VALUES.expectedStatusCode);\nassertCorrectBody(body);\nassertCorrectItems(body.items);\nbody.items.forEach(item => {\n\tassert.equal(item.country.code, value);\n});",
              "err": {
                "message": "AssertionError: expected 'kg' to equal 'kz'",
                "estack": "AssertionError: expected 'kg' to equal 'kz'\n    at /home/andrey/Dev/test2gis/src/tests/country-code.spec.js:41:12\n    at Array.forEach (<anonymous>)\n    at Context.<anonymous> (src/tests/country-code.spec.js:40:15)\n    at processTicksAndRejections (internal/process/task_queues.js:88:5)",
                "diff": "- kg\n+ kz\n"
              },
              "uuid": "9fed0235-2af3-4387-981e-9e0a5aaf3cb4",
              "parentUUID": "6b6cff55-a4e8-46c9-96e2-43988c070a07",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "проверка валидного значения: cz",
              "fullTitle": "проверка параметра \"country_code\" проверка валидного значения: cz",
              "timedOut": false,
              "duration": 64,
              "state": "passed",
              "speed": "medium",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "// arrange\nconst queryParams = { country_code: value };\n// act\nconst { body, statusCode } = await findRegions(queryParams);\n// assert\nassertCorrectStatusCode(statusCode, VALID_VALUES.expectedStatusCode);\nassertCorrectBody(body);\nassertCorrectItems(body.items);\nbody.items.forEach(item => {\n\tassert.equal(item.country.code, value);\n});",
              "err": {},
              "uuid": "b51e71a4-15aa-42dd-ad8e-c27696128c47",
              "parentUUID": "6b6cff55-a4e8-46c9-96e2-43988c070a07",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "проверка невалидного значения: 0",
              "fullTitle": "проверка параметра \"country_code\" проверка невалидного значения: 0",
              "timedOut": false,
              "duration": 21,
              "state": "failed",
              "speed": null,
              "pass": false,
              "fail": true,
              "pending": false,
              "context": null,
              "code": "// arrange\nconst queryParams = { country_code: value };\n// act\nconst { body, statusCode } = await findRegions(queryParams);\n// assert\nassertErrorBody(body, INVALID_VALUES.expectedErrorMessage);\nassertCorrectStatusCode(statusCode, INVALID_VALUES.expectedStatusCode);",
              "err": {
                "message": "AssertionError: HTTP-статус ответа от сервера должен быть 400: expected 200 to equal 400",
                "estack": "AssertionError: HTTP-статус ответа от сервера должен быть 400: expected 200 to equal 400\n    at assertCorrectStatusCode (src/helpers/custom-assertions.js:42:10)\n    at Context.<anonymous> (src/tests/country-code.spec.js:56:4)\n    at processTicksAndRejections (internal/process/task_queues.js:88:5)",
                "diff": "- 200\n+ 400\n"
              },
              "uuid": "099144f0-a867-45df-94e3-e39cd83db8b4",
              "parentUUID": "6b6cff55-a4e8-46c9-96e2-43988c070a07",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "проверка невалидного значения: -1",
              "fullTitle": "проверка параметра \"country_code\" проверка невалидного значения: -1",
              "timedOut": false,
              "duration": 18,
              "state": "failed",
              "speed": null,
              "pass": false,
              "fail": true,
              "pending": false,
              "context": null,
              "code": "// arrange\nconst queryParams = { country_code: value };\n// act\nconst { body, statusCode } = await findRegions(queryParams);\n// assert\nassertErrorBody(body, INVALID_VALUES.expectedErrorMessage);\nassertCorrectStatusCode(statusCode, INVALID_VALUES.expectedStatusCode);",
              "err": {
                "message": "AssertionError: HTTP-статус ответа от сервера должен быть 400: expected 200 to equal 400",
                "estack": "AssertionError: HTTP-статус ответа от сервера должен быть 400: expected 200 to equal 400\n    at assertCorrectStatusCode (src/helpers/custom-assertions.js:42:10)\n    at Context.<anonymous> (src/tests/country-code.spec.js:56:4)\n    at processTicksAndRejections (internal/process/task_queues.js:88:5)",
                "diff": "- 200\n+ 400\n"
              },
              "uuid": "24d4dc86-8832-4a46-bd0a-8506dd6ac636",
              "parentUUID": "6b6cff55-a4e8-46c9-96e2-43988c070a07",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "проверка невалидного значения: KG",
              "fullTitle": "проверка параметра \"country_code\" проверка невалидного значения: KG",
              "timedOut": false,
              "duration": 19,
              "state": "failed",
              "speed": null,
              "pass": false,
              "fail": true,
              "pending": false,
              "context": null,
              "code": "// arrange\nconst queryParams = { country_code: value };\n// act\nconst { body, statusCode } = await findRegions(queryParams);\n// assert\nassertErrorBody(body, INVALID_VALUES.expectedErrorMessage);\nassertCorrectStatusCode(statusCode, INVALID_VALUES.expectedStatusCode);",
              "err": {
                "message": "AssertionError: HTTP-статус ответа от сервера должен быть 400: expected 200 to equal 400",
                "estack": "AssertionError: HTTP-статус ответа от сервера должен быть 400: expected 200 to equal 400\n    at assertCorrectStatusCode (src/helpers/custom-assertions.js:42:10)\n    at Context.<anonymous> (src/tests/country-code.spec.js:56:4)\n    at processTicksAndRejections (internal/process/task_queues.js:88:5)",
                "diff": "- 200\n+ 400\n"
              },
              "uuid": "5e0c3de5-ac05-499a-a869-dc8ff114b88e",
              "parentUUID": "6b6cff55-a4e8-46c9-96e2-43988c070a07",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "проверка невалидного значения: adasdasdad",
              "fullTitle": "проверка параметра \"country_code\" проверка невалидного значения: adasdasdad",
              "timedOut": false,
              "duration": 18,
              "state": "failed",
              "speed": null,
              "pass": false,
              "fail": true,
              "pending": false,
              "context": null,
              "code": "// arrange\nconst queryParams = { country_code: value };\n// act\nconst { body, statusCode } = await findRegions(queryParams);\n// assert\nassertErrorBody(body, INVALID_VALUES.expectedErrorMessage);\nassertCorrectStatusCode(statusCode, INVALID_VALUES.expectedStatusCode);",
              "err": {
                "message": "AssertionError: HTTP-статус ответа от сервера должен быть 400: expected 200 to equal 400",
                "estack": "AssertionError: HTTP-статус ответа от сервера должен быть 400: expected 200 to equal 400\n    at assertCorrectStatusCode (src/helpers/custom-assertions.js:42:10)\n    at Context.<anonymous> (src/tests/country-code.spec.js:56:4)\n    at processTicksAndRejections (internal/process/task_queues.js:88:5)",
                "diff": "- 200\n+ 400\n"
              },
              "uuid": "c5999f37-431f-49cf-982e-08b5ad1dd296",
              "parentUUID": "6b6cff55-a4e8-46c9-96e2-43988c070a07",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "проверка невалидного значения: false",
              "fullTitle": "проверка параметра \"country_code\" проверка невалидного значения: false",
              "timedOut": false,
              "duration": 22,
              "state": "failed",
              "speed": null,
              "pass": false,
              "fail": true,
              "pending": false,
              "context": null,
              "code": "// arrange\nconst queryParams = { country_code: value };\n// act\nconst { body, statusCode } = await findRegions(queryParams);\n// assert\nassertErrorBody(body, INVALID_VALUES.expectedErrorMessage);\nassertCorrectStatusCode(statusCode, INVALID_VALUES.expectedStatusCode);",
              "err": {
                "message": "AssertionError: HTTP-статус ответа от сервера должен быть 400: expected 200 to equal 400",
                "estack": "AssertionError: HTTP-статус ответа от сервера должен быть 400: expected 200 to equal 400\n    at assertCorrectStatusCode (src/helpers/custom-assertions.js:42:10)\n    at Context.<anonymous> (src/tests/country-code.spec.js:56:4)\n    at processTicksAndRejections (internal/process/task_queues.js:88:5)",
                "diff": "- 200\n+ 400\n"
              },
              "uuid": "5724c6df-54a4-4cee-aaba-0467b36e877d",
              "parentUUID": "6b6cff55-a4e8-46c9-96e2-43988c070a07",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "проверка невалидного значения: ua",
              "fullTitle": "проверка параметра \"country_code\" проверка невалидного значения: ua",
              "timedOut": false,
              "duration": 23,
              "state": "failed",
              "speed": null,
              "pass": false,
              "fail": true,
              "pending": false,
              "context": null,
              "code": "// arrange\nconst queryParams = { country_code: value };\n// act\nconst { body, statusCode } = await findRegions(queryParams);\n// assert\nassertErrorBody(body, INVALID_VALUES.expectedErrorMessage);\nassertCorrectStatusCode(statusCode, INVALID_VALUES.expectedStatusCode);",
              "err": {
                "message": "AssertionError: expected { Object (total, items) } to have key 'error'",
                "estack": "AssertionError: expected { Object (total, items) } to have key 'error'\n    at assertErrorBody (src/helpers/custom-assertions.js:8:10)\n    at Context.<anonymous> (src/tests/country-code.spec.js:55:4)\n    at processTicksAndRejections (internal/process/task_queues.js:88:5)",
                "diff": " [\n-   \"items\"\n-   \"total\"\n+   \"error\"\n ]\n"
              },
              "uuid": "cc15bdc3-c061-48c7-95cf-d1318ed89d2d",
              "parentUUID": "6b6cff55-a4e8-46c9-96e2-43988c070a07",
              "isHook": false,
              "skipped": false
            }
          ],
          "suites": [],
          "passes": [
            "548d788e-1d64-4161-af1c-c911c163cfd2",
            "b51e71a4-15aa-42dd-ad8e-c27696128c47"
          ],
          "failures": [
            "ff794125-8808-4acd-be70-0a7fc5c95035",
            "9fed0235-2af3-4387-981e-9e0a5aaf3cb4",
            "099144f0-a867-45df-94e3-e39cd83db8b4",
            "24d4dc86-8832-4a46-bd0a-8506dd6ac636",
            "5e0c3de5-ac05-499a-a869-dc8ff114b88e",
            "c5999f37-431f-49cf-982e-08b5ad1dd296",
            "5724c6df-54a4-4cee-aaba-0467b36e877d",
            "cc15bdc3-c061-48c7-95cf-d1318ed89d2d"
          ],
          "pending": [],
          "skipped": [],
          "duration": 341,
          "root": false,
          "rootEmpty": false,
          "_timeout": 2000
        },
        {
          "uuid": "975656db-084b-45de-bec6-c5383a7cf1ed",
          "title": "проверка параметра \"page_size\"",
          "fullFile": "/home/andrey/Dev/test2gis/src/tests/page-size.spec.js",
          "file": "/src/tests/page-size.spec.js",
          "beforeHooks": [],
          "afterHooks": [],
          "tests": [
            {
              "title": "проверка значения по умолчанию: 15",
              "fullTitle": "проверка параметра \"page_size\" проверка значения по умолчанию: 15",
              "timedOut": false,
              "duration": 22,
              "state": "failed",
              "speed": null,
              "pass": false,
              "fail": true,
              "pending": false,
              "context": null,
              "code": "// arrange\nconst queryParams = {};\n// act\nconst { body, statusCode } = await findRegions(queryParams);\nconst itemsSize = body.items.length;\n// assert\nassertCorrectBody(body);\nassertCorrectItems(body.items);\nassert.equal(itemsSize, DEFAULT_VALUE);\nassertCorrectStatusCode(statusCode, httpStatuses.OK);",
              "err": {
                "message": "AssertionError: expected 10 to equal 15",
                "estack": "AssertionError: expected 10 to equal 15\n    at Context.<anonymous> (src/tests/page-size.spec.js:47:10)\n    at processTicksAndRejections (internal/process/task_queues.js:88:5)",
                "diff": "- 10\n+ 15\n"
              },
              "uuid": "add19af5-a304-46d1-a5a3-bdd626ed486b",
              "parentUUID": "975656db-084b-45de-bec6-c5383a7cf1ed",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "проверка валидного значения: 5",
              "fullTitle": "проверка параметра \"page_size\" проверка валидного значения: 5",
              "timedOut": false,
              "duration": 20,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "// arrange\nconst queryParams = { page_size: value };\n// act\nconst { body, statusCode } = await findRegions(queryParams);\nconst itemsSize = body.items.length;\n// assert\nassertCorrectStatusCode(statusCode, VALID_VALUES.expectedStatusCode);\nassertCorrectItems(body.items);\nassert.equal(itemsSize, value);",
              "err": {},
              "uuid": "4e94a4be-819f-467f-a3dc-afa0f81fa538",
              "parentUUID": "975656db-084b-45de-bec6-c5383a7cf1ed",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "проверка валидного значения: 10",
              "fullTitle": "проверка параметра \"page_size\" проверка валидного значения: 10",
              "timedOut": false,
              "duration": 21,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "// arrange\nconst queryParams = { page_size: value };\n// act\nconst { body, statusCode } = await findRegions(queryParams);\nconst itemsSize = body.items.length;\n// assert\nassertCorrectStatusCode(statusCode, VALID_VALUES.expectedStatusCode);\nassertCorrectItems(body.items);\nassert.equal(itemsSize, value);",
              "err": {},
              "uuid": "42b5ccf9-0727-4f05-bc66-405946500956",
              "parentUUID": "975656db-084b-45de-bec6-c5383a7cf1ed",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "проверка валидного значения: 15",
              "fullTitle": "проверка параметра \"page_size\" проверка валидного значения: 15",
              "timedOut": false,
              "duration": 22,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "// arrange\nconst queryParams = { page_size: value };\n// act\nconst { body, statusCode } = await findRegions(queryParams);\nconst itemsSize = body.items.length;\n// assert\nassertCorrectStatusCode(statusCode, VALID_VALUES.expectedStatusCode);\nassertCorrectItems(body.items);\nassert.equal(itemsSize, value);",
              "err": {},
              "uuid": "3d500018-ef60-487a-8077-6b2202ae7f83",
              "parentUUID": "975656db-084b-45de-bec6-c5383a7cf1ed",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "проверка некорректного числового значения: -99999999",
              "fullTitle": "проверка параметра \"page_size\" проверка некорректного числового значения: -99999999",
              "timedOut": false,
              "duration": 20,
              "state": "failed",
              "speed": null,
              "pass": false,
              "fail": true,
              "pending": false,
              "context": null,
              "code": "// arrange\nconst queryParams = { page_size: value };\n// act\nconst { body, statusCode } = await findRegions(queryParams);\n            \n// assert\nassertCorrectStatusCode(statusCode, INVALID_TYPES_VALUES.expectedStatusCode);\nassertErrorBody(body, INVALID_NUMBER_VALUES.expectedErrorMessage);",
              "err": {
                "message": "AssertionError: HTTP-статус ответа от сервера должен быть 400: expected 200 to equal 400",
                "estack": "AssertionError: HTTP-статус ответа от сервера должен быть 400: expected 200 to equal 400\n    at assertCorrectStatusCode (src/helpers/custom-assertions.js:42:10)\n    at Context.<anonymous> (src/tests/page-size.spec.js:76:4)\n    at processTicksAndRejections (internal/process/task_queues.js:88:5)",
                "diff": "- 200\n+ 400\n"
              },
              "uuid": "5638d061-9d94-4516-9e6d-69eafd92a367",
              "parentUUID": "975656db-084b-45de-bec6-c5383a7cf1ed",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "проверка некорректного числового значения: -1",
              "fullTitle": "проверка параметра \"page_size\" проверка некорректного числового значения: -1",
              "timedOut": false,
              "duration": 42,
              "state": "failed",
              "speed": null,
              "pass": false,
              "fail": true,
              "pending": false,
              "context": null,
              "code": "// arrange\nconst queryParams = { page_size: value };\n// act\nconst { body, statusCode } = await findRegions(queryParams);\n            \n// assert\nassertCorrectStatusCode(statusCode, INVALID_TYPES_VALUES.expectedStatusCode);\nassertErrorBody(body, INVALID_NUMBER_VALUES.expectedErrorMessage);",
              "err": {
                "message": "AssertionError: HTTP-статус ответа от сервера должен быть 400: expected 200 to equal 400",
                "estack": "AssertionError: HTTP-статус ответа от сервера должен быть 400: expected 200 to equal 400\n    at assertCorrectStatusCode (src/helpers/custom-assertions.js:42:10)\n    at Context.<anonymous> (src/tests/page-size.spec.js:76:4)\n    at processTicksAndRejections (internal/process/task_queues.js:88:5)",
                "diff": "- 200\n+ 400\n"
              },
              "uuid": "3701b38e-33ee-4141-8cf2-1439134b12c3",
              "parentUUID": "975656db-084b-45de-bec6-c5383a7cf1ed",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "проверка некорректного числового значения: 0",
              "fullTitle": "проверка параметра \"page_size\" проверка некорректного числового значения: 0",
              "timedOut": false,
              "duration": 25,
              "state": "failed",
              "speed": null,
              "pass": false,
              "fail": true,
              "pending": false,
              "context": null,
              "code": "// arrange\nconst queryParams = { page_size: value };\n// act\nconst { body, statusCode } = await findRegions(queryParams);\n            \n// assert\nassertCorrectStatusCode(statusCode, INVALID_TYPES_VALUES.expectedStatusCode);\nassertErrorBody(body, INVALID_NUMBER_VALUES.expectedErrorMessage);",
              "err": {
                "message": "AssertionError: HTTP-статус ответа от сервера должен быть 400: expected 200 to equal 400",
                "estack": "AssertionError: HTTP-статус ответа от сервера должен быть 400: expected 200 to equal 400\n    at assertCorrectStatusCode (src/helpers/custom-assertions.js:42:10)\n    at Context.<anonymous> (src/tests/page-size.spec.js:76:4)\n    at processTicksAndRejections (internal/process/task_queues.js:88:5)",
                "diff": "- 200\n+ 400\n"
              },
              "uuid": "2450fd08-b432-44d4-ba7c-6be1c2113088",
              "parentUUID": "975656db-084b-45de-bec6-c5383a7cf1ed",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "проверка некорректного числового значения: 20",
              "fullTitle": "проверка параметра \"page_size\" проверка некорректного числового значения: 20",
              "timedOut": false,
              "duration": 18,
              "state": "failed",
              "speed": null,
              "pass": false,
              "fail": true,
              "pending": false,
              "context": null,
              "code": "// arrange\nconst queryParams = { page_size: value };\n// act\nconst { body, statusCode } = await findRegions(queryParams);\n            \n// assert\nassertCorrectStatusCode(statusCode, INVALID_TYPES_VALUES.expectedStatusCode);\nassertErrorBody(body, INVALID_NUMBER_VALUES.expectedErrorMessage);",
              "err": {
                "message": "AssertionError: HTTP-статус ответа от сервера должен быть 400: expected 200 to equal 400",
                "estack": "AssertionError: HTTP-статус ответа от сервера должен быть 400: expected 200 to equal 400\n    at assertCorrectStatusCode (src/helpers/custom-assertions.js:42:10)\n    at Context.<anonymous> (src/tests/page-size.spec.js:76:4)\n    at processTicksAndRejections (internal/process/task_queues.js:88:5)",
                "diff": "- 200\n+ 400\n"
              },
              "uuid": "9e5adba8-4354-4b3c-8965-2c7947397179",
              "parentUUID": "975656db-084b-45de-bec6-c5383a7cf1ed",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "проверка некорректного числового значения: 99999999",
              "fullTitle": "проверка параметра \"page_size\" проверка некорректного числового значения: 99999999",
              "timedOut": false,
              "duration": 17,
              "state": "failed",
              "speed": null,
              "pass": false,
              "fail": true,
              "pending": false,
              "context": null,
              "code": "// arrange\nconst queryParams = { page_size: value };\n// act\nconst { body, statusCode } = await findRegions(queryParams);\n            \n// assert\nassertCorrectStatusCode(statusCode, INVALID_TYPES_VALUES.expectedStatusCode);\nassertErrorBody(body, INVALID_NUMBER_VALUES.expectedErrorMessage);",
              "err": {
                "message": "AssertionError: HTTP-статус ответа от сервера должен быть 400: expected 200 to equal 400",
                "estack": "AssertionError: HTTP-статус ответа от сервера должен быть 400: expected 200 to equal 400\n    at assertCorrectStatusCode (src/helpers/custom-assertions.js:42:10)\n    at Context.<anonymous> (src/tests/page-size.spec.js:76:4)\n    at processTicksAndRejections (internal/process/task_queues.js:88:5)",
                "diff": "- 200\n+ 400\n"
              },
              "uuid": "43c80af6-caf6-42ba-b6bb-9db59f8745da",
              "parentUUID": "975656db-084b-45de-bec6-c5383a7cf1ed",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "проверка некорректного нечислового значения: true",
              "fullTitle": "проверка параметра \"page_size\" проверка некорректного нечислового значения: true",
              "timedOut": false,
              "duration": 17,
              "state": "failed",
              "speed": null,
              "pass": false,
              "fail": true,
              "pending": false,
              "context": null,
              "code": "// arrange\nconst queryParams = { page_size: value };\n// act\nconst { body, statusCode } = await findRegions(queryParams);\n// assert\nassertCorrectStatusCode(statusCode, INVALID_TYPES_VALUES.expectedStatusCode);\nassertErrorBody(body, INVALID_TYPES_VALUES.expectedErrorMessage);",
              "err": {
                "message": "AssertionError: HTTP-статус ответа от сервера должен быть 400: expected 200 to equal 400",
                "estack": "AssertionError: HTTP-статус ответа от сервера должен быть 400: expected 200 to equal 400\n    at assertCorrectStatusCode (src/helpers/custom-assertions.js:42:10)\n    at Context.<anonymous> (src/tests/page-size.spec.js:90:4)\n    at processTicksAndRejections (internal/process/task_queues.js:88:5)",
                "diff": "- 200\n+ 400\n"
              },
              "uuid": "c46e6cd0-bc67-459d-af18-e072ce4e7a0f",
              "parentUUID": "975656db-084b-45de-bec6-c5383a7cf1ed",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "проверка некорректного нечислового значения: false",
              "fullTitle": "проверка параметра \"page_size\" проверка некорректного нечислового значения: false",
              "timedOut": false,
              "duration": 16,
              "state": "failed",
              "speed": null,
              "pass": false,
              "fail": true,
              "pending": false,
              "context": null,
              "code": "// arrange\nconst queryParams = { page_size: value };\n// act\nconst { body, statusCode } = await findRegions(queryParams);\n// assert\nassertCorrectStatusCode(statusCode, INVALID_TYPES_VALUES.expectedStatusCode);\nassertErrorBody(body, INVALID_TYPES_VALUES.expectedErrorMessage);",
              "err": {
                "message": "AssertionError: HTTP-статус ответа от сервера должен быть 400: expected 200 to equal 400",
                "estack": "AssertionError: HTTP-статус ответа от сервера должен быть 400: expected 200 to equal 400\n    at assertCorrectStatusCode (src/helpers/custom-assertions.js:42:10)\n    at Context.<anonymous> (src/tests/page-size.spec.js:90:4)\n    at processTicksAndRejections (internal/process/task_queues.js:88:5)",
                "diff": "- 200\n+ 400\n"
              },
              "uuid": "05f17194-e7fa-4f96-a16b-0da29eb9f3b6",
              "parentUUID": "975656db-084b-45de-bec6-c5383a7cf1ed",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "проверка некорректного нечислового значения: null",
              "fullTitle": "проверка параметра \"page_size\" проверка некорректного нечислового значения: null",
              "timedOut": false,
              "duration": 16,
              "state": "failed",
              "speed": null,
              "pass": false,
              "fail": true,
              "pending": false,
              "context": null,
              "code": "// arrange\nconst queryParams = { page_size: value };\n// act\nconst { body, statusCode } = await findRegions(queryParams);\n// assert\nassertCorrectStatusCode(statusCode, INVALID_TYPES_VALUES.expectedStatusCode);\nassertErrorBody(body, INVALID_TYPES_VALUES.expectedErrorMessage);",
              "err": {
                "message": "AssertionError: HTTP-статус ответа от сервера должен быть 400: expected 200 to equal 400",
                "estack": "AssertionError: HTTP-статус ответа от сервера должен быть 400: expected 200 to equal 400\n    at assertCorrectStatusCode (src/helpers/custom-assertions.js:42:10)\n    at Context.<anonymous> (src/tests/page-size.spec.js:90:4)\n    at processTicksAndRejections (internal/process/task_queues.js:88:5)",
                "diff": "- 200\n+ 400\n"
              },
              "uuid": "2ec63729-9549-4a39-a175-bc2fab1786cc",
              "parentUUID": "975656db-084b-45de-bec6-c5383a7cf1ed",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "проверка некорректного нечислового значения: !,",
              "fullTitle": "проверка параметра \"page_size\" проверка некорректного нечислового значения: !,",
              "timedOut": false,
              "duration": 27,
              "state": "failed",
              "speed": null,
              "pass": false,
              "fail": true,
              "pending": false,
              "context": null,
              "code": "// arrange\nconst queryParams = { page_size: value };\n// act\nconst { body, statusCode } = await findRegions(queryParams);\n// assert\nassertCorrectStatusCode(statusCode, INVALID_TYPES_VALUES.expectedStatusCode);\nassertErrorBody(body, INVALID_TYPES_VALUES.expectedErrorMessage);",
              "err": {
                "message": "AssertionError: HTTP-статус ответа от сервера должен быть 400: expected 200 to equal 400",
                "estack": "AssertionError: HTTP-статус ответа от сервера должен быть 400: expected 200 to equal 400\n    at assertCorrectStatusCode (src/helpers/custom-assertions.js:42:10)\n    at Context.<anonymous> (src/tests/page-size.spec.js:90:4)\n    at processTicksAndRejections (internal/process/task_queues.js:88:5)",
                "diff": "- 200\n+ 400\n"
              },
              "uuid": "d9f540dd-5606-4b87-81fd-5f696b9e1269",
              "parentUUID": "975656db-084b-45de-bec6-c5383a7cf1ed",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "проверка некорректного нечислового значения: '",
              "fullTitle": "проверка параметра \"page_size\" проверка некорректного нечислового значения: '",
              "timedOut": false,
              "duration": 33,
              "state": "failed",
              "speed": null,
              "pass": false,
              "fail": true,
              "pending": false,
              "context": null,
              "code": "// arrange\nconst queryParams = { page_size: value };\n// act\nconst { body, statusCode } = await findRegions(queryParams);\n// assert\nassertCorrectStatusCode(statusCode, INVALID_TYPES_VALUES.expectedStatusCode);\nassertErrorBody(body, INVALID_TYPES_VALUES.expectedErrorMessage);",
              "err": {
                "message": "AssertionError: HTTP-статус ответа от сервера должен быть 400: expected 200 to equal 400",
                "estack": "AssertionError: HTTP-статус ответа от сервера должен быть 400: expected 200 to equal 400\n    at assertCorrectStatusCode (src/helpers/custom-assertions.js:42:10)\n    at Context.<anonymous> (src/tests/page-size.spec.js:90:4)\n    at processTicksAndRejections (internal/process/task_queues.js:88:5)",
                "diff": "- 200\n+ 400\n"
              },
              "uuid": "c37fb020-7698-428a-b610-8dedaccab5f9",
              "parentUUID": "975656db-084b-45de-bec6-c5383a7cf1ed",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "проверка некорректного нечислового значения: 0.5",
              "fullTitle": "проверка параметра \"page_size\" проверка некорректного нечислового значения: 0.5",
              "timedOut": false,
              "duration": 19,
              "state": "failed",
              "speed": null,
              "pass": false,
              "fail": true,
              "pending": false,
              "context": null,
              "code": "// arrange\nconst queryParams = { page_size: value };\n// act\nconst { body, statusCode } = await findRegions(queryParams);\n// assert\nassertCorrectStatusCode(statusCode, INVALID_TYPES_VALUES.expectedStatusCode);\nassertErrorBody(body, INVALID_TYPES_VALUES.expectedErrorMessage);",
              "err": {
                "message": "AssertionError: HTTP-статус ответа от сервера должен быть 400: expected 200 to equal 400",
                "estack": "AssertionError: HTTP-статус ответа от сервера должен быть 400: expected 200 to equal 400\n    at assertCorrectStatusCode (src/helpers/custom-assertions.js:42:10)\n    at Context.<anonymous> (src/tests/page-size.spec.js:90:4)\n    at processTicksAndRejections (internal/process/task_queues.js:88:5)",
                "diff": "- 200\n+ 400\n"
              },
              "uuid": "b94413d6-2e08-4e49-a710-d0055137984a",
              "parentUUID": "975656db-084b-45de-bec6-c5383a7cf1ed",
              "isHook": false,
              "skipped": false
            }
          ],
          "suites": [],
          "passes": [
            "4e94a4be-819f-467f-a3dc-afa0f81fa538",
            "42b5ccf9-0727-4f05-bc66-405946500956",
            "3d500018-ef60-487a-8077-6b2202ae7f83"
          ],
          "failures": [
            "add19af5-a304-46d1-a5a3-bdd626ed486b",
            "5638d061-9d94-4516-9e6d-69eafd92a367",
            "3701b38e-33ee-4141-8cf2-1439134b12c3",
            "2450fd08-b432-44d4-ba7c-6be1c2113088",
            "9e5adba8-4354-4b3c-8965-2c7947397179",
            "43c80af6-caf6-42ba-b6bb-9db59f8745da",
            "c46e6cd0-bc67-459d-af18-e072ce4e7a0f",
            "05f17194-e7fa-4f96-a16b-0da29eb9f3b6",
            "2ec63729-9549-4a39-a175-bc2fab1786cc",
            "d9f540dd-5606-4b87-81fd-5f696b9e1269",
            "c37fb020-7698-428a-b610-8dedaccab5f9",
            "b94413d6-2e08-4e49-a710-d0055137984a"
          ],
          "pending": [],
          "skipped": [],
          "duration": 335,
          "root": false,
          "rootEmpty": false,
          "_timeout": 2000
        },
        {
          "uuid": "ed94edd3-26fd-4d48-8412-3f85f83840ad",
          "title": "проверка параметра \"page\"",
          "fullFile": "/home/andrey/Dev/test2gis/src/tests/page.spec.js",
          "file": "/src/tests/page.spec.js",
          "beforeHooks": [],
          "afterHooks": [],
          "tests": [
            {
              "title": "проверка большого значения page",
              "fullTitle": "проверка параметра \"page\" проверка большого значения page",
              "timedOut": false,
              "duration": 19,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "// arrange\nconst queryParams = { page: 1000000 };\n// act\nconst { body, statusCode } = await findRegions(queryParams);\n// assert\nassertCorrectStatusCode(statusCode, httpStatuses.OK);\nassertCorrectBody(body);\nassert.isEmpty(body.items);",
              "err": {},
              "uuid": "a421f0c6-fd12-4205-825a-8cf7632f7412",
              "parentUUID": "ed94edd3-26fd-4d48-8412-3f85f83840ad",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "проверка значения по умолчанию: 1",
              "fullTitle": "проверка параметра \"page\" проверка значения по умолчанию: 1",
              "timedOut": false,
              "duration": 37,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "// arrange\nconst emptyQueryParams = {};\nconst queryParams = { page: DEFAULT_VALUE };\n// act\nconst { body: bodyWithoutQueryParams } = await findRegions(emptyQueryParams);\nconst { body } = await findRegions(queryParams);\n// assert\nassert.deepEqual(body, bodyWithoutQueryParams);",
              "err": {},
              "uuid": "eb7a6512-0cef-4fec-bd0d-e153086f6f22",
              "parentUUID": "ed94edd3-26fd-4d48-8412-3f85f83840ad",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "проверка пагинации со значением page_size: 5",
              "fullTitle": "проверка параметра \"page\" проверка пагинации со значением page_size: 5",
              "timedOut": false,
              "duration": 36,
              "state": "failed",
              "speed": null,
              "pass": false,
              "fail": true,
              "pending": false,
              "context": null,
              "code": "// arrange\nconst firstTestQueryParams = { page: 1, page_size: pageSize };\nconst secontTestQueryParams = { page: 2, page_size: pageSize };\n\t\t\n// act\nconst firstResponse = await findRegions(firstTestQueryParams);\nconst firstBody = firstResponse.body;\n\t\t\nconst secondResponse = await findRegions(secontTestQueryParams);\nconst secondBody = secondResponse.body;\nconst firstItemsIds = firstBody.items.map(item => item.id);\nconst secondItemsIds = secondBody.items.map(item => item.id);\nconst intersectionItemsIds = firstItemsIds.filter(x => secondItemsIds.includes(x));\n// assert\nassertCorrectStatusCode(firstResponse.statusCode, httpStatuses.OK);\nassertCorrectStatusCode(secondResponse.statusCode, httpStatuses.OK);\nassertCorrectBody(firstBody);\nassertCorrectBody(secondBody);\nassert.isEmpty(intersectionItemsIds, `Регионы с id =[${intersectionItemsIds}] дублируются на страницах.`);",
              "err": {
                "message": "AssertionError: Регионы с id =[114] дублируются на страницах.: expected [ 114 ] to be empty",
                "estack": "AssertionError: Регионы с id =[114] дублируются на страницах.: expected [ 114 ] to be empty\n    at Context.<anonymous> (src/tests/page.spec.js:87:11)\n    at processTicksAndRejections (internal/process/task_queues.js:88:5)",
                "diff": null
              },
              "uuid": "9ba16bca-5417-49c9-8ad3-02d0e378dde0",
              "parentUUID": "ed94edd3-26fd-4d48-8412-3f85f83840ad",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "проверка пагинации со значением page_size: 10",
              "fullTitle": "проверка параметра \"page\" проверка пагинации со значением page_size: 10",
              "timedOut": false,
              "duration": 34,
              "state": "failed",
              "speed": null,
              "pass": false,
              "fail": true,
              "pending": false,
              "context": null,
              "code": "// arrange\nconst firstTestQueryParams = { page: 1, page_size: pageSize };\nconst secontTestQueryParams = { page: 2, page_size: pageSize };\n\t\t\n// act\nconst firstResponse = await findRegions(firstTestQueryParams);\nconst firstBody = firstResponse.body;\n\t\t\nconst secondResponse = await findRegions(secontTestQueryParams);\nconst secondBody = secondResponse.body;\nconst firstItemsIds = firstBody.items.map(item => item.id);\nconst secondItemsIds = secondBody.items.map(item => item.id);\nconst intersectionItemsIds = firstItemsIds.filter(x => secondItemsIds.includes(x));\n// assert\nassertCorrectStatusCode(firstResponse.statusCode, httpStatuses.OK);\nassertCorrectStatusCode(secondResponse.statusCode, httpStatuses.OK);\nassertCorrectBody(firstBody);\nassertCorrectBody(secondBody);\nassert.isEmpty(intersectionItemsIds, `Регионы с id =[${intersectionItemsIds}] дублируются на страницах.`);",
              "err": {
                "message": "AssertionError: Регионы с id =[32] дублируются на страницах.: expected [ 32 ] to be empty",
                "estack": "AssertionError: Регионы с id =[32] дублируются на страницах.: expected [ 32 ] to be empty\n    at Context.<anonymous> (src/tests/page.spec.js:87:11)\n    at processTicksAndRejections (internal/process/task_queues.js:88:5)",
                "diff": null
              },
              "uuid": "12ecaef2-7a4b-4f25-8e3e-11400b0f4966",
              "parentUUID": "ed94edd3-26fd-4d48-8412-3f85f83840ad",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "проверка пагинации со значением page_size: 15",
              "fullTitle": "проверка параметра \"page\" проверка пагинации со значением page_size: 15",
              "timedOut": false,
              "duration": 40,
              "state": "failed",
              "speed": null,
              "pass": false,
              "fail": true,
              "pending": false,
              "context": null,
              "code": "// arrange\nconst firstTestQueryParams = { page: 1, page_size: pageSize };\nconst secontTestQueryParams = { page: 2, page_size: pageSize };\n\t\t\n// act\nconst firstResponse = await findRegions(firstTestQueryParams);\nconst firstBody = firstResponse.body;\n\t\t\nconst secondResponse = await findRegions(secontTestQueryParams);\nconst secondBody = secondResponse.body;\nconst firstItemsIds = firstBody.items.map(item => item.id);\nconst secondItemsIds = secondBody.items.map(item => item.id);\nconst intersectionItemsIds = firstItemsIds.filter(x => secondItemsIds.includes(x));\n// assert\nassertCorrectStatusCode(firstResponse.statusCode, httpStatuses.OK);\nassertCorrectStatusCode(secondResponse.statusCode, httpStatuses.OK);\nassertCorrectBody(firstBody);\nassertCorrectBody(secondBody);\nassert.isEmpty(intersectionItemsIds, `Регионы с id =[${intersectionItemsIds}] дублируются на страницах.`);",
              "err": {
                "message": "AssertionError: Регионы с id =[171] дублируются на страницах.: expected [ 171 ] to be empty",
                "estack": "AssertionError: Регионы с id =[171] дублируются на страницах.: expected [ 171 ] to be empty\n    at Context.<anonymous> (src/tests/page.spec.js:87:11)\n    at processTicksAndRejections (internal/process/task_queues.js:88:5)",
                "diff": null
              },
              "uuid": "851f6a59-9389-4eac-b4b3-b424a202ce31",
              "parentUUID": "ed94edd3-26fd-4d48-8412-3f85f83840ad",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "проверка невалидного значения: -999999999999999999999999",
              "fullTitle": "проверка параметра \"page\" проверка невалидного значения: -999999999999999999999999",
              "timedOut": false,
              "duration": 20,
              "state": "failed",
              "speed": null,
              "pass": false,
              "fail": true,
              "pending": false,
              "context": null,
              "code": "// arrange\nconst queryParams = { page: value };\n// act\nconst { body, statusCode } = await findRegions(queryParams);\n// assert\nassertCorrectStatusCode(statusCode, INVALID_NUMBER_VALUES.expectedStatusCode);\nassertErrorBody(body, INVALID_NUMBER_VALUES.expectedErrorMessage);",
              "err": {
                "message": "AssertionError: HTTP-статус ответа от сервера должен быть 400: expected 200 to equal 400",
                "estack": "AssertionError: HTTP-статус ответа от сервера должен быть 400: expected 200 to equal 400\n    at assertCorrectStatusCode (src/helpers/custom-assertions.js:42:10)\n    at Context.<anonymous> (src/tests/page.spec.js:100:4)\n    at processTicksAndRejections (internal/process/task_queues.js:88:5)",
                "diff": "- 200\n+ 400\n"
              },
              "uuid": "9a500c9b-b453-436d-92da-2293f9d53597",
              "parentUUID": "ed94edd3-26fd-4d48-8412-3f85f83840ad",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "проверка невалидного значения: -1",
              "fullTitle": "проверка параметра \"page\" проверка невалидного значения: -1",
              "timedOut": false,
              "duration": 26,
              "state": "failed",
              "speed": null,
              "pass": false,
              "fail": true,
              "pending": false,
              "context": null,
              "code": "// arrange\nconst queryParams = { page: value };\n// act\nconst { body, statusCode } = await findRegions(queryParams);\n// assert\nassertCorrectStatusCode(statusCode, INVALID_NUMBER_VALUES.expectedStatusCode);\nassertErrorBody(body, INVALID_NUMBER_VALUES.expectedErrorMessage);",
              "err": {
                "message": "AssertionError: HTTP-статус ответа от сервера должен быть 400: expected 200 to equal 400",
                "estack": "AssertionError: HTTP-статус ответа от сервера должен быть 400: expected 200 to equal 400\n    at assertCorrectStatusCode (src/helpers/custom-assertions.js:42:10)\n    at Context.<anonymous> (src/tests/page.spec.js:100:4)\n    at processTicksAndRejections (internal/process/task_queues.js:88:5)",
                "diff": "- 200\n+ 400\n"
              },
              "uuid": "cc443bb0-74f3-4202-b634-c91ceed66825",
              "parentUUID": "ed94edd3-26fd-4d48-8412-3f85f83840ad",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "проверка невалидного значения: 0",
              "fullTitle": "проверка параметра \"page\" проверка невалидного значения: 0",
              "timedOut": false,
              "duration": 19,
              "state": "failed",
              "speed": null,
              "pass": false,
              "fail": true,
              "pending": false,
              "context": null,
              "code": "// arrange\nconst queryParams = { page: value };\n// act\nconst { body, statusCode } = await findRegions(queryParams);\n// assert\nassertCorrectStatusCode(statusCode, INVALID_NUMBER_VALUES.expectedStatusCode);\nassertErrorBody(body, INVALID_NUMBER_VALUES.expectedErrorMessage);",
              "err": {
                "message": "FetchError: invalid json response body at https://regions-test.2gis.com/1.0/regions?page=0 reason: Unexpected token I in JSON at position 4",
                "estack": "FetchError: invalid json response body at https://regions-test.2gis.com/1.0/regions?page=0 reason: Unexpected token I in JSON at position 4\n    at /home/andrey/Dev/test2gis/node_modules/node-fetch/lib/body.js:48:31\n    at processTicksAndRejections (internal/process/task_queues.js:88:5)\n    at async module.exports (src/helpers/find-regions.js:9:15)\n    at async Context.<anonymous> (src/tests/page.spec.js:97:33)",
                "diff": null
              },
              "uuid": "d67ff437-8953-4e98-bdf9-6f2c4fcfabaa",
              "parentUUID": "ed94edd3-26fd-4d48-8412-3f85f83840ad",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "проверка некорректного нечислового значения: true",
              "fullTitle": "проверка параметра \"page\" проверка некорректного нечислового значения: true",
              "timedOut": false,
              "duration": 15,
              "state": "failed",
              "speed": null,
              "pass": false,
              "fail": true,
              "pending": false,
              "context": null,
              "code": "// arrange\nconst queryParams = { page: value };\n// act\nconst { body, statusCode } = await findRegions(queryParams);\n// assert\nassertCorrectStatusCode(statusCode, INVALID_TYPES_VALUES.expectedStatusCode);\nassertErrorBody(body, INVALID_TYPES_VALUES.expectedErrorMessage);",
              "err": {
                "message": "AssertionError: HTTP-статус ответа от сервера должен быть 400: expected 200 to equal 400",
                "estack": "AssertionError: HTTP-статус ответа от сервера должен быть 400: expected 200 to equal 400\n    at assertCorrectStatusCode (src/helpers/custom-assertions.js:42:10)\n    at Context.<anonymous> (src/tests/page.spec.js:114:4)\n    at processTicksAndRejections (internal/process/task_queues.js:88:5)",
                "diff": "- 200\n+ 400\n"
              },
              "uuid": "116d89d6-935e-4cc4-8b20-f3b23ade71c1",
              "parentUUID": "ed94edd3-26fd-4d48-8412-3f85f83840ad",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "проверка некорректного нечислового значения: false",
              "fullTitle": "проверка параметра \"page\" проверка некорректного нечислового значения: false",
              "timedOut": false,
              "duration": 18,
              "state": "failed",
              "speed": null,
              "pass": false,
              "fail": true,
              "pending": false,
              "context": null,
              "code": "// arrange\nconst queryParams = { page: value };\n// act\nconst { body, statusCode } = await findRegions(queryParams);\n// assert\nassertCorrectStatusCode(statusCode, INVALID_TYPES_VALUES.expectedStatusCode);\nassertErrorBody(body, INVALID_TYPES_VALUES.expectedErrorMessage);",
              "err": {
                "message": "AssertionError: HTTP-статус ответа от сервера должен быть 400: expected 200 to equal 400",
                "estack": "AssertionError: HTTP-статус ответа от сервера должен быть 400: expected 200 to equal 400\n    at assertCorrectStatusCode (src/helpers/custom-assertions.js:42:10)\n    at Context.<anonymous> (src/tests/page.spec.js:114:4)\n    at processTicksAndRejections (internal/process/task_queues.js:88:5)",
                "diff": "- 200\n+ 400\n"
              },
              "uuid": "056cd00a-f361-4108-8aed-1ae48e9b1c67",
              "parentUUID": "ed94edd3-26fd-4d48-8412-3f85f83840ad",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "проверка некорректного нечислового значения: null",
              "fullTitle": "проверка параметра \"page\" проверка некорректного нечислового значения: null",
              "timedOut": false,
              "duration": 24,
              "state": "failed",
              "speed": null,
              "pass": false,
              "fail": true,
              "pending": false,
              "context": null,
              "code": "// arrange\nconst queryParams = { page: value };\n// act\nconst { body, statusCode } = await findRegions(queryParams);\n// assert\nassertCorrectStatusCode(statusCode, INVALID_TYPES_VALUES.expectedStatusCode);\nassertErrorBody(body, INVALID_TYPES_VALUES.expectedErrorMessage);",
              "err": {
                "message": "AssertionError: HTTP-статус ответа от сервера должен быть 400: expected 200 to equal 400",
                "estack": "AssertionError: HTTP-статус ответа от сервера должен быть 400: expected 200 to equal 400\n    at assertCorrectStatusCode (src/helpers/custom-assertions.js:42:10)\n    at Context.<anonymous> (src/tests/page.spec.js:114:4)\n    at processTicksAndRejections (internal/process/task_queues.js:88:5)",
                "diff": "- 200\n+ 400\n"
              },
              "uuid": "1e00a880-3e53-47c3-9e61-bcd7ce316095",
              "parentUUID": "ed94edd3-26fd-4d48-8412-3f85f83840ad",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "проверка некорректного нечислового значения: !,",
              "fullTitle": "проверка параметра \"page\" проверка некорректного нечислового значения: !,",
              "timedOut": false,
              "duration": 17,
              "state": "failed",
              "speed": null,
              "pass": false,
              "fail": true,
              "pending": false,
              "context": null,
              "code": "// arrange\nconst queryParams = { page: value };\n// act\nconst { body, statusCode } = await findRegions(queryParams);\n// assert\nassertCorrectStatusCode(statusCode, INVALID_TYPES_VALUES.expectedStatusCode);\nassertErrorBody(body, INVALID_TYPES_VALUES.expectedErrorMessage);",
              "err": {
                "message": "AssertionError: HTTP-статус ответа от сервера должен быть 400: expected 200 to equal 400",
                "estack": "AssertionError: HTTP-статус ответа от сервера должен быть 400: expected 200 to equal 400\n    at assertCorrectStatusCode (src/helpers/custom-assertions.js:42:10)\n    at Context.<anonymous> (src/tests/page.spec.js:114:4)\n    at processTicksAndRejections (internal/process/task_queues.js:88:5)",
                "diff": "- 200\n+ 400\n"
              },
              "uuid": "97a9d694-e71c-47b3-94a2-03c8fde9d0d6",
              "parentUUID": "ed94edd3-26fd-4d48-8412-3f85f83840ad",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "проверка некорректного нечислового значения: '",
              "fullTitle": "проверка параметра \"page\" проверка некорректного нечислового значения: '",
              "timedOut": false,
              "duration": 16,
              "state": "failed",
              "speed": null,
              "pass": false,
              "fail": true,
              "pending": false,
              "context": null,
              "code": "// arrange\nconst queryParams = { page: value };\n// act\nconst { body, statusCode } = await findRegions(queryParams);\n// assert\nassertCorrectStatusCode(statusCode, INVALID_TYPES_VALUES.expectedStatusCode);\nassertErrorBody(body, INVALID_TYPES_VALUES.expectedErrorMessage);",
              "err": {
                "message": "AssertionError: HTTP-статус ответа от сервера должен быть 400: expected 200 to equal 400",
                "estack": "AssertionError: HTTP-статус ответа от сервера должен быть 400: expected 200 to equal 400\n    at assertCorrectStatusCode (src/helpers/custom-assertions.js:42:10)\n    at Context.<anonymous> (src/tests/page.spec.js:114:4)\n    at processTicksAndRejections (internal/process/task_queues.js:88:5)",
                "diff": "- 200\n+ 400\n"
              },
              "uuid": "d939481b-0a88-4875-8b3f-05a0b7e1d569",
              "parentUUID": "ed94edd3-26fd-4d48-8412-3f85f83840ad",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "проверка некорректного нечислового значения: 0.5",
              "fullTitle": "проверка параметра \"page\" проверка некорректного нечислового значения: 0.5",
              "timedOut": false,
              "duration": 17,
              "state": "failed",
              "speed": null,
              "pass": false,
              "fail": true,
              "pending": false,
              "context": null,
              "code": "// arrange\nconst queryParams = { page: value };\n// act\nconst { body, statusCode } = await findRegions(queryParams);\n// assert\nassertCorrectStatusCode(statusCode, INVALID_TYPES_VALUES.expectedStatusCode);\nassertErrorBody(body, INVALID_TYPES_VALUES.expectedErrorMessage);",
              "err": {
                "message": "AssertionError: HTTP-статус ответа от сервера должен быть 400: expected 200 to equal 400",
                "estack": "AssertionError: HTTP-статус ответа от сервера должен быть 400: expected 200 to equal 400\n    at assertCorrectStatusCode (src/helpers/custom-assertions.js:42:10)\n    at Context.<anonymous> (src/tests/page.spec.js:114:4)\n    at processTicksAndRejections (internal/process/task_queues.js:88:5)",
                "diff": "- 200\n+ 400\n"
              },
              "uuid": "9d180131-c77c-4f7c-a6b0-a98f07a0ab91",
              "parentUUID": "ed94edd3-26fd-4d48-8412-3f85f83840ad",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "проверка некорректного нечислового значения: -0.5",
              "fullTitle": "проверка параметра \"page\" проверка некорректного нечислового значения: -0.5",
              "timedOut": false,
              "duration": 17,
              "state": "failed",
              "speed": null,
              "pass": false,
              "fail": true,
              "pending": false,
              "context": null,
              "code": "// arrange\nconst queryParams = { page: value };\n// act\nconst { body, statusCode } = await findRegions(queryParams);\n// assert\nassertCorrectStatusCode(statusCode, INVALID_TYPES_VALUES.expectedStatusCode);\nassertErrorBody(body, INVALID_TYPES_VALUES.expectedErrorMessage);",
              "err": {
                "message": "AssertionError: HTTP-статус ответа от сервера должен быть 400: expected 200 to equal 400",
                "estack": "AssertionError: HTTP-статус ответа от сервера должен быть 400: expected 200 to equal 400\n    at assertCorrectStatusCode (src/helpers/custom-assertions.js:42:10)\n    at Context.<anonymous> (src/tests/page.spec.js:114:4)\n    at processTicksAndRejections (internal/process/task_queues.js:88:5)",
                "diff": "- 200\n+ 400\n"
              },
              "uuid": "83498c31-84e0-4b5f-bad4-115f3c2eecbb",
              "parentUUID": "ed94edd3-26fd-4d48-8412-3f85f83840ad",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "проверка некорректного нечислового значения: -0,5",
              "fullTitle": "проверка параметра \"page\" проверка некорректного нечислового значения: -0,5",
              "timedOut": false,
              "duration": 18,
              "state": "failed",
              "speed": null,
              "pass": false,
              "fail": true,
              "pending": false,
              "context": null,
              "code": "// arrange\nconst queryParams = { page: value };\n// act\nconst { body, statusCode } = await findRegions(queryParams);\n// assert\nassertCorrectStatusCode(statusCode, INVALID_TYPES_VALUES.expectedStatusCode);\nassertErrorBody(body, INVALID_TYPES_VALUES.expectedErrorMessage);",
              "err": {
                "message": "AssertionError: HTTP-статус ответа от сервера должен быть 400: expected 200 to equal 400",
                "estack": "AssertionError: HTTP-статус ответа от сервера должен быть 400: expected 200 to equal 400\n    at assertCorrectStatusCode (src/helpers/custom-assertions.js:42:10)\n    at Context.<anonymous> (src/tests/page.spec.js:114:4)\n    at processTicksAndRejections (internal/process/task_queues.js:88:5)",
                "diff": "- 200\n+ 400\n"
              },
              "uuid": "efb62cde-5891-4896-a77a-d924b1f36e02",
              "parentUUID": "ed94edd3-26fd-4d48-8412-3f85f83840ad",
              "isHook": false,
              "skipped": false
            }
          ],
          "suites": [],
          "passes": [
            "a421f0c6-fd12-4205-825a-8cf7632f7412",
            "eb7a6512-0cef-4fec-bd0d-e153086f6f22"
          ],
          "failures": [
            "9ba16bca-5417-49c9-8ad3-02d0e378dde0",
            "12ecaef2-7a4b-4f25-8e3e-11400b0f4966",
            "851f6a59-9389-4eac-b4b3-b424a202ce31",
            "9a500c9b-b453-436d-92da-2293f9d53597",
            "cc443bb0-74f3-4202-b634-c91ceed66825",
            "d67ff437-8953-4e98-bdf9-6f2c4fcfabaa",
            "116d89d6-935e-4cc4-8b20-f3b23ade71c1",
            "056cd00a-f361-4108-8aed-1ae48e9b1c67",
            "1e00a880-3e53-47c3-9e61-bcd7ce316095",
            "97a9d694-e71c-47b3-94a2-03c8fde9d0d6",
            "d939481b-0a88-4875-8b3f-05a0b7e1d569",
            "9d180131-c77c-4f7c-a6b0-a98f07a0ab91",
            "83498c31-84e0-4b5f-bad4-115f3c2eecbb",
            "efb62cde-5891-4896-a77a-d924b1f36e02"
          ],
          "pending": [],
          "skipped": [],
          "duration": 373,
          "root": false,
          "rootEmpty": false,
          "_timeout": 2000
        },
        {
          "uuid": "ecdfc9ee-54ca-4a03-bf6c-f61cdcce8a36",
          "title": "проверка параметра \"q\"",
          "fullFile": "/home/andrey/Dev/test2gis/src/tests/q.spec.js",
          "file": "/src/tests/q.spec.js",
          "beforeHooks": [],
          "afterHooks": [],
          "tests": [
            {
              "title": "проверка валидного значения на пустую выдачу: Moskva",
              "fullTitle": "проверка параметра \"q\" проверка валидного значения на пустую выдачу: Moskva",
              "timedOut": false,
              "duration": 18,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "// arrange\nconst queryParams = { q: value };\n// act\nconst { body, statusCode } = await findRegions(queryParams);\n// assert\nassertCorrectStatusCode(statusCode, VALID_VALUES_FOR_EMPTY_ITEMS.expectedStatusCode);\nassertCorrectBody(body);\nassert.isEmpty(body.items);",
              "err": {},
              "uuid": "18ae9fe2-f1b4-4490-812f-25187c64445b",
              "parentUUID": "ecdfc9ee-54ca-4a03-bf6c-f61cdcce8a36",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "проверка валидного значения на пустую выдачу: Новоновосибибирск",
              "fullTitle": "проверка параметра \"q\" проверка валидного значения на пустую выдачу: Новоновосибибирск",
              "timedOut": false,
              "duration": 19,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "// arrange\nconst queryParams = { q: value };\n// act\nconst { body, statusCode } = await findRegions(queryParams);\n// assert\nassertCorrectStatusCode(statusCode, VALID_VALUES_FOR_EMPTY_ITEMS.expectedStatusCode);\nassertCorrectBody(body);\nassert.isEmpty(body.items);",
              "err": {},
              "uuid": "051133db-9fb5-48b5-a78d-53615b2f3cec",
              "parentUUID": "ecdfc9ee-54ca-4a03-bf6c-f61cdcce8a36",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "проверка валидного значения на пустую выдачу: 123",
              "fullTitle": "проверка параметра \"q\" проверка валидного значения на пустую выдачу: 123",
              "timedOut": false,
              "duration": 17,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "// arrange\nconst queryParams = { q: value };\n// act\nconst { body, statusCode } = await findRegions(queryParams);\n// assert\nassertCorrectStatusCode(statusCode, VALID_VALUES_FOR_EMPTY_ITEMS.expectedStatusCode);\nassertCorrectBody(body);\nassert.isEmpty(body.items);",
              "err": {},
              "uuid": "93fd61aa-0be6-4542-afd3-0aa8c1c7fd06",
              "parentUUID": "ecdfc9ee-54ca-4a03-bf6c-f61cdcce8a36",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "проверка валидного значения на пустую выдачу: false",
              "fullTitle": "проверка параметра \"q\" проверка валидного значения на пустую выдачу: false",
              "timedOut": false,
              "duration": 17,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "// arrange\nconst queryParams = { q: value };\n// act\nconst { body, statusCode } = await findRegions(queryParams);\n// assert\nassertCorrectStatusCode(statusCode, VALID_VALUES_FOR_EMPTY_ITEMS.expectedStatusCode);\nassertCorrectBody(body);\nassert.isEmpty(body.items);",
              "err": {},
              "uuid": "459b147f-47ea-4872-88d5-d7c59d9eaf16",
              "parentUUID": "ecdfc9ee-54ca-4a03-bf6c-f61cdcce8a36",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "проверка валидного значения на пустую выдачу: true",
              "fullTitle": "проверка параметра \"q\" проверка валидного значения на пустую выдачу: true",
              "timedOut": false,
              "duration": 17,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "// arrange\nconst queryParams = { q: value };\n// act\nconst { body, statusCode } = await findRegions(queryParams);\n// assert\nassertCorrectStatusCode(statusCode, VALID_VALUES_FOR_EMPTY_ITEMS.expectedStatusCode);\nassertCorrectBody(body);\nassert.isEmpty(body.items);",
              "err": {},
              "uuid": "d106dc04-262e-4b69-8d64-9accf1d337be",
              "parentUUID": "ecdfc9ee-54ca-4a03-bf6c-f61cdcce8a36",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "проверка валидного значения на пустую выдачу: !!'",
              "fullTitle": "проверка параметра \"q\" проверка валидного значения на пустую выдачу: !!'",
              "timedOut": false,
              "duration": 18,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "// arrange\nconst queryParams = { q: value };\n// act\nconst { body, statusCode } = await findRegions(queryParams);\n// assert\nassertCorrectStatusCode(statusCode, VALID_VALUES_FOR_EMPTY_ITEMS.expectedStatusCode);\nassertCorrectBody(body);\nassert.isEmpty(body.items);",
              "err": {},
              "uuid": "668bd7f5-3026-493c-8133-8c2e4187074c",
              "parentUUID": "ecdfc9ee-54ca-4a03-bf6c-f61cdcce8a36",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "проверка валидного значения: \"НОв\"",
              "fullTitle": "проверка параметра \"q\" проверка валидного значения: \"НОв\"",
              "timedOut": false,
              "duration": 18,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "// arrange\nconst queryParams = { q: value };\n// act\nconst { body, statusCode } = await findRegions(queryParams);\n            \n// assert\nassertCorrectStatusCode(statusCode, VALID_VALUES.expectedStatusCode);\nassertCorrectBody(body);\nassertCorrectItems(body.items);\nbody.items.forEach(item => {\n\tassert.include(item.name.toLowerCase(), value.toLowerCase());\n});",
              "err": {},
              "uuid": "eb0ad681-674f-4a8a-985b-a52cd3ba1095",
              "parentUUID": "ecdfc9ee-54ca-4a03-bf6c-f61cdcce8a36",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "проверка валидного значения: \"СТАН\"",
              "fullTitle": "проверка параметра \"q\" проверка валидного значения: \"СТАН\"",
              "timedOut": false,
              "duration": 17,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "// arrange\nconst queryParams = { q: value };\n// act\nconst { body, statusCode } = await findRegions(queryParams);\n            \n// assert\nassertCorrectStatusCode(statusCode, VALID_VALUES.expectedStatusCode);\nassertCorrectBody(body);\nassertCorrectItems(body.items);\nbody.items.forEach(item => {\n\tassert.include(item.name.toLowerCase(), value.toLowerCase());\n});",
              "err": {},
              "uuid": "b3f976ae-62f8-48e1-97dc-fd2759c6527b",
              "parentUUID": "ecdfc9ee-54ca-4a03-bf6c-f61cdcce8a36",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "проверка валидного значения: \"бишкек\"",
              "fullTitle": "проверка параметра \"q\" проверка валидного значения: \"бишкек\"",
              "timedOut": false,
              "duration": 17,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "// arrange\nconst queryParams = { q: value };\n// act\nconst { body, statusCode } = await findRegions(queryParams);\n            \n// assert\nassertCorrectStatusCode(statusCode, VALID_VALUES.expectedStatusCode);\nassertCorrectBody(body);\nassertCorrectItems(body.items);\nbody.items.forEach(item => {\n\tassert.include(item.name.toLowerCase(), value.toLowerCase());\n});",
              "err": {},
              "uuid": "bc069655-d37b-4793-b31e-2c817f233792",
              "parentUUID": "ecdfc9ee-54ca-4a03-bf6c-f61cdcce8a36",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "проверка валидного значения: \"ть-\"",
              "fullTitle": "проверка параметра \"q\" проверка валидного значения: \"ть-\"",
              "timedOut": false,
              "duration": 18,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "// arrange\nconst queryParams = { q: value };\n// act\nconst { body, statusCode } = await findRegions(queryParams);\n            \n// assert\nassertCorrectStatusCode(statusCode, VALID_VALUES.expectedStatusCode);\nassertCorrectBody(body);\nassertCorrectItems(body.items);\nbody.items.forEach(item => {\n\tassert.include(item.name.toLowerCase(), value.toLowerCase());\n});",
              "err": {},
              "uuid": "43cde078-6de0-41ce-aa9a-dff515f4caa9",
              "parentUUID": "ecdfc9ee-54ca-4a03-bf6c-f61cdcce8a36",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "проверка валидного значения: \"Нижний Новгород\"",
              "fullTitle": "проверка параметра \"q\" проверка валидного значения: \"Нижний Новгород\"",
              "timedOut": false,
              "duration": 17,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "// arrange\nconst queryParams = { q: value };\n// act\nconst { body, statusCode } = await findRegions(queryParams);\n            \n// assert\nassertCorrectStatusCode(statusCode, VALID_VALUES.expectedStatusCode);\nassertCorrectBody(body);\nassertCorrectItems(body.items);\nbody.items.forEach(item => {\n\tassert.include(item.name.toLowerCase(), value.toLowerCase());\n});",
              "err": {},
              "uuid": "23dc3557-f788-4a80-9a31-f565f08b7494",
              "parentUUID": "ecdfc9ee-54ca-4a03-bf6c-f61cdcce8a36",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "проверка валидного значения: \"восток\"",
              "fullTitle": "проверка параметра \"q\" проверка валидного значения: \"восток\"",
              "timedOut": false,
              "duration": 18,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "// arrange\nconst queryParams = { q: value };\n// act\nconst { body, statusCode } = await findRegions(queryParams);\n            \n// assert\nassertCorrectStatusCode(statusCode, VALID_VALUES.expectedStatusCode);\nassertCorrectBody(body);\nassertCorrectItems(body.items);\nbody.items.forEach(item => {\n\tassert.include(item.name.toLowerCase(), value.toLowerCase());\n});",
              "err": {},
              "uuid": "bfe42e77-ed5d-43d4-95eb-f803156e595c",
              "parentUUID": "ecdfc9ee-54ca-4a03-bf6c-f61cdcce8a36",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "проверка валидного значения: \"АКТАУ\"",
              "fullTitle": "проверка параметра \"q\" проверка валидного значения: \"АКТАУ\"",
              "timedOut": false,
              "duration": 18,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "// arrange\nconst queryParams = { q: value };\n// act\nconst { body, statusCode } = await findRegions(queryParams);\n            \n// assert\nassertCorrectStatusCode(statusCode, VALID_VALUES.expectedStatusCode);\nassertCorrectBody(body);\nassertCorrectItems(body.items);\nbody.items.forEach(item => {\n\tassert.include(item.name.toLowerCase(), value.toLowerCase());\n});",
              "err": {},
              "uuid": "3666877b-db97-4c7b-8efa-eb90761bc158",
              "parentUUID": "ecdfc9ee-54ca-4a03-bf6c-f61cdcce8a36",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "проверка валидного значения: \"к-К\"",
              "fullTitle": "проверка параметра \"q\" проверка валидного значения: \"к-К\"",
              "timedOut": false,
              "duration": 17,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "// arrange\nconst queryParams = { q: value };\n// act\nconst { body, statusCode } = await findRegions(queryParams);\n            \n// assert\nassertCorrectStatusCode(statusCode, VALID_VALUES.expectedStatusCode);\nassertCorrectBody(body);\nassertCorrectItems(body.items);\nbody.items.forEach(item => {\n\tassert.include(item.name.toLowerCase(), value.toLowerCase());\n});",
              "err": {},
              "uuid": "fa7b1fa4-c185-455f-ba1b-cf60f1f7e939",
              "parentUUID": "ecdfc9ee-54ca-4a03-bf6c-f61cdcce8a36",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "проверка валидного значения: \"й Н\"",
              "fullTitle": "проверка параметра \"q\" проверка валидного значения: \"й Н\"",
              "timedOut": false,
              "duration": 24,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "// arrange\nconst queryParams = { q: value };\n// act\nconst { body, statusCode } = await findRegions(queryParams);\n            \n// assert\nassertCorrectStatusCode(statusCode, VALID_VALUES.expectedStatusCode);\nassertCorrectBody(body);\nassertCorrectItems(body.items);\nbody.items.forEach(item => {\n\tassert.include(item.name.toLowerCase(), value.toLowerCase());\n});",
              "err": {},
              "uuid": "a1f50803-f80e-4186-a045-437c6fecada8",
              "parentUUID": "ecdfc9ee-54ca-4a03-bf6c-f61cdcce8a36",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "проверка невалидного значения менee 3 символов: \"\"",
              "fullTitle": "проверка параметра \"q\" проверка невалидного значения менee 3 символов: \"\"",
              "timedOut": false,
              "duration": 22,
              "state": "failed",
              "speed": null,
              "pass": false,
              "fail": true,
              "pending": false,
              "context": null,
              "code": "// arrange\nconst queryParams = { q: value };\n// act\nconst { body, statusCode } = await findRegions(queryParams);\n// assert\nassertCorrectStatusCode(statusCode, INVALID_SHORT_VALUES.expectedStatusCode);\nassertErrorBody(body, INVALID_SHORT_VALUES.expectedErrorMessage);",
              "err": {
                "message": "FetchError: invalid json response body at https://regions-test.2gis.com/1.0/regions?q= reason: Unexpected token I in JSON at position 4",
                "estack": "FetchError: invalid json response body at https://regions-test.2gis.com/1.0/regions?q= reason: Unexpected token I in JSON at position 4\n    at /home/andrey/Dev/test2gis/node_modules/node-fetch/lib/body.js:48:31\n    at processTicksAndRejections (internal/process/task_queues.js:88:5)\n    at async module.exports (src/helpers/find-regions.js:9:15)\n    at async Context.<anonymous> (src/tests/q.spec.js:78:33)",
                "diff": null
              },
              "uuid": "2c3e4330-1e63-49ab-b1ca-0c8922c0362b",
              "parentUUID": "ecdfc9ee-54ca-4a03-bf6c-f61cdcce8a36",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "проверка невалидного значения менee 3 символов: \"н\"",
              "fullTitle": "проверка параметра \"q\" проверка невалидного значения менee 3 символов: \"н\"",
              "timedOut": false,
              "duration": 27,
              "state": "failed",
              "speed": null,
              "pass": false,
              "fail": true,
              "pending": false,
              "context": null,
              "code": "// arrange\nconst queryParams = { q: value };\n// act\nconst { body, statusCode } = await findRegions(queryParams);\n// assert\nassertCorrectStatusCode(statusCode, INVALID_SHORT_VALUES.expectedStatusCode);\nassertErrorBody(body, INVALID_SHORT_VALUES.expectedErrorMessage);",
              "err": {
                "message": "AssertionError: HTTP-статус ответа от сервера должен быть 400: expected 200 to equal 400",
                "estack": "AssertionError: HTTP-статус ответа от сервера должен быть 400: expected 200 to equal 400\n    at assertCorrectStatusCode (src/helpers/custom-assertions.js:42:10)\n    at Context.<anonymous> (src/tests/q.spec.js:81:4)\n    at processTicksAndRejections (internal/process/task_queues.js:88:5)",
                "diff": "- 200\n+ 400\n"
              },
              "uuid": "3e03a008-a7c3-4743-bf33-de3e16fad5b7",
              "parentUUID": "ecdfc9ee-54ca-4a03-bf6c-f61cdcce8a36",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "проверка невалидного значения менee 3 символов: \"ст\"",
              "fullTitle": "проверка параметра \"q\" проверка невалидного значения менee 3 символов: \"ст\"",
              "timedOut": false,
              "duration": 18,
              "state": "failed",
              "speed": null,
              "pass": false,
              "fail": true,
              "pending": false,
              "context": null,
              "code": "// arrange\nconst queryParams = { q: value };\n// act\nconst { body, statusCode } = await findRegions(queryParams);\n// assert\nassertCorrectStatusCode(statusCode, INVALID_SHORT_VALUES.expectedStatusCode);\nassertErrorBody(body, INVALID_SHORT_VALUES.expectedErrorMessage);",
              "err": {
                "message": "AssertionError: HTTP-статус ответа от сервера должен быть 400: expected 200 to equal 400",
                "estack": "AssertionError: HTTP-статус ответа от сервера должен быть 400: expected 200 to equal 400\n    at assertCorrectStatusCode (src/helpers/custom-assertions.js:42:10)\n    at Context.<anonymous> (src/tests/q.spec.js:81:4)\n    at processTicksAndRejections (internal/process/task_queues.js:88:5)",
                "diff": "- 200\n+ 400\n"
              },
              "uuid": "944a316f-9d7b-464e-8953-1e764ba11409",
              "parentUUID": "ecdfc9ee-54ca-4a03-bf6c-f61cdcce8a36",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "проверка значения длиной > 30",
              "fullTitle": "проверка параметра \"q\" проверка значения длиной > 30",
              "timedOut": false,
              "duration": 17,
              "state": "failed",
              "speed": null,
              "pass": false,
              "fail": true,
              "pending": false,
              "context": null,
              "code": "// arrange\nconst queryParams = { q: INVALID_LONG_VALUE.value };\n        \n// act\nconst { body, statusCode } = await findRegions(queryParams);\n// assert\nassertCorrectStatusCode(statusCode, INVALID_LONG_VALUE.expectedStatusCode);\nassertErrorBody(body, INVALID_LONG_VALUE.expectedErrorMessage);",
              "err": {
                "message": "AssertionError: HTTP-статус ответа от сервера должен быть 400: expected 200 to equal 400",
                "estack": "AssertionError: HTTP-статус ответа от сервера должен быть 400: expected 200 to equal 400\n    at assertCorrectStatusCode (src/helpers/custom-assertions.js:42:10)\n    at Context.<anonymous> (src/tests/q.spec.js:94:3)\n    at processTicksAndRejections (internal/process/task_queues.js:88:5)",
                "diff": "- 200\n+ 400\n"
              },
              "uuid": "e27808f2-cfe0-4749-97ef-6ee4752cb785",
              "parentUUID": "ecdfc9ee-54ca-4a03-bf6c-f61cdcce8a36",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "проверка игнорирования всех других параметров при указанном q",
              "fullTitle": "проверка параметра \"q\" проверка игнорирования всех других параметров при указанном q",
              "timedOut": false,
              "duration": 59,
              "state": "passed",
              "speed": "medium",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "// arrange\nconst queryParamsOnlyQ = { q: VALID_VALUES.values[0] };\nconst combineQueries = [\n\t{ ...queryParamsOnlyQ, page_size: -1 },\n\t{ ...queryParamsOnlyQ, country_code: 'cz' },\n\t{ ...queryParamsOnlyQ, page: 10 },\n\t{ ...queryParamsOnlyQ, page: 20, country_code: 'asdasd', page_size: 11 }\n];\n// act\nconst { body: expectedbody } = await findRegions(queryParamsOnlyQ);\nconst responses = await Promise.all(\n\tcombineQueries.map(query => findRegions(query))\n);\n// assert\nassertCorrectItems(expectedbody.items);\nresponses.forEach(response => {\n\tassertCorrectStatusCode(response.statusCode, httpStatuses.OK);\n\tassert.deepEqual(expectedbody, response.body);\n});",
              "err": {},
              "uuid": "4d3bff4b-6078-480d-b466-d2301678c53a",
              "parentUUID": "ecdfc9ee-54ca-4a03-bf6c-f61cdcce8a36",
              "isHook": false,
              "skipped": false
            }
          ],
          "suites": [],
          "passes": [
            "18ae9fe2-f1b4-4490-812f-25187c64445b",
            "051133db-9fb5-48b5-a78d-53615b2f3cec",
            "93fd61aa-0be6-4542-afd3-0aa8c1c7fd06",
            "459b147f-47ea-4872-88d5-d7c59d9eaf16",
            "d106dc04-262e-4b69-8d64-9accf1d337be",
            "668bd7f5-3026-493c-8133-8c2e4187074c",
            "eb0ad681-674f-4a8a-985b-a52cd3ba1095",
            "b3f976ae-62f8-48e1-97dc-fd2759c6527b",
            "bc069655-d37b-4793-b31e-2c817f233792",
            "43cde078-6de0-41ce-aa9a-dff515f4caa9",
            "23dc3557-f788-4a80-9a31-f565f08b7494",
            "bfe42e77-ed5d-43d4-95eb-f803156e595c",
            "3666877b-db97-4c7b-8efa-eb90761bc158",
            "fa7b1fa4-c185-455f-ba1b-cf60f1f7e939",
            "a1f50803-f80e-4186-a045-437c6fecada8",
            "4d3bff4b-6078-480d-b466-d2301678c53a"
          ],
          "failures": [
            "2c3e4330-1e63-49ab-b1ca-0c8922c0362b",
            "3e03a008-a7c3-4743-bf33-de3e16fad5b7",
            "944a316f-9d7b-464e-8953-1e764ba11409",
            "e27808f2-cfe0-4749-97ef-6ee4752cb785"
          ],
          "pending": [],
          "skipped": [],
          "duration": 413,
          "root": false,
          "rootEmpty": false,
          "_timeout": 2000
        }
      ],
      "passes": [],
      "failures": [],
      "pending": [],
      "skipped": [],
      "duration": 0,
      "root": true,
      "rootEmpty": true,
      "_timeout": 2000
    }
  ],
  "meta": {
    "mocha": {
      "version": "8.0.1"
    },
    "mochawesome": {
      "options": {
        "quiet": false,
        "reportFilename": "mochawesome",
        "saveHtml": true,
        "saveJson": true,
        "consoleReporter": "spec",
        "useInlineDiffs": false,
        "code": true
      },
      "version": "6.1.1"
    },
    "marge": {
      "options": null,
      "version": "5.1.0"
    }
  }
}